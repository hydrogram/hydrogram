[project]
name = "Hydrogram"
dynamic = ["version"]
description = "Sleek, advanced, and asynchronous Telegram MTProto API framework in Python, designed for fluid user and bot interactions."
authors = [{ name = "Hydrogram", email = "contact@hydrogram.org" }]
dependencies = ["pyaes==1.6.1", "pysocks==1.7.1"]
readme = "README.md"
license = "LGPL-3.0-or-later"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet",
    "Topic :: Communications",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["telegram chat messenger mtproto api client library python"]

[tool.hatch.version]
path = "hydrogram/__init__.py"

# Used to call hatch_build.py
[tool.hatch.build.hooks.custom]

[project.urls]
homepage = "https://hydrogram.org"
tracker = "https://github.com/hydrogram/hydrogram/issues"
community = "https://t.me/HydrogramNews"
source = "https://github.com/hydrogram/hydrogram"
documentation = "https://docs.hydrogram.org"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "ruff>=0.5.4",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "twine>=4.0.2",
    "pre-commit>=3.7.1",
]

[project.optional-dependencies]
docs = [
    "sphinx>=7.4.7",
    "furo>=2024.7.18",
    "sphinx-autobuild>=2024.4.16",
    "sphinx-copybutton>=0.5.2",
    "pygments>=2.18.0",
    "towncrier>=23.11.0",
    "sphinxcontrib-towncrier>=0.4.0a0",
]
fast = [
    "tgcrypto>=1.2.5",
    "uvloop>=0.19.0; (sys_platform == 'darwin' or sys_platform == 'linux') and platform_python_implementation != 'PyPy'",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [
    ".github/",
    "dev_tools/",
    "docs/",
    "news/",
    "tests/",
    ".editorconfig",
    ".gitignore",
    ".pre-commit-config.yaml",
    "CONTRIBUTING.md",
    "NEWS.rst",
    "requirements.lock",
    "requirements-dev.lock",
]

[tool.hatch.build.targets.wheel]
ignore-vcs = true
package = "hydrogram"

[tool.ruff]
line-length = 99
target-version = "py39"

[tool.ruff.lint]
select = [
    "FURB", # refurb
    "I",    # isort
    "E",    # pycodestyle: error
    "W",    # pycodestyle: warning
    "UP",   # pyupgrade
    "F",    # pyflakes
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    "C4",   # flake8-comprehensions
    "PTH",  # flake8-use-pathlib
    "PERF", # perflint
    "N",    # pep8-naming
    "RUF",  # ruff
    "G",    # flake8-logging-format
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "FA",   # flake8-future-annotations
    "PL",   # pylint
]
ignore = [
    "RUF001",
    "RUF002",
    "RUF003",
    "E203",
    "PERF203",
    "PLR09",
    "PLR2004",
    "PLR1702",
    "PLW1514",
    "PLW2901",
    "PLW0603",
]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["hydrogram"]

[tool.ruff.format]
docstring-code-format = true
preview = true

[tool.towncrier]
package = "hydrogram"
filename = "NEWS.rst"
directory = "news/"
template = "news/.template.rst.jinja2"
issue_format = "`#{issue} <https://github.com/hydrogram/hydrogram/issues/{issue}>`_"

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Deprecations and Removals"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Misc"
showcontent = true

[tool.rye.scripts]
clean = { chain = ["clean:docs", "clean:api"] }
"clean:api" = { cmd = "rm -rf hydrogram/errors/exceptions hydrogram/raw/all.py hydrogram/raw/base hydrogram/raw/functions hydrogram/raw/types" }
"clean:docs" = { cmd = "rm -rf docs/build docs/source/api/bound-methods docs/source/api/methods docs/source/api/types docs/source/telegram" }

api = { chain = ["api:raw", "api:errors"] }
"api:raw" = { call = "compiler.api.compiler:start" }
"api:errors" = { call = "compiler.errors.compiler:start" }

docs = { chain = ["docs:compile", "docs:serve"] }
"docs:compile" = { cmd = "python compiler/docs/compiler.py" }
"docs:serve" = { cmd = "sphinx-build -b html docs/source docs/build/html -j auto" }
live-docs = { cmd = "sphinx-autobuild docs/source docs/build/html -j auto --watch src" }

towncrier = { cmd = "towncrier build --yes" }
towncrier-draft = { cmd = "towncrier build --draft" }
